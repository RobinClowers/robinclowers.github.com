<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Databinding | Robin's development blog]]></title>
  <link href="http://RobinClowers.github.com/blog/categories/databinding/atom.xml" rel="self"/>
  <link href="http://RobinClowers.github.com/"/>
  <updated>2012-02-26T08:40:47-08:00</updated>
  <id>http://RobinClowers.github.com/</id>
  <author>
    <name><![CDATA[Robin Clowers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making the ASP.NET DataGrid Usable]]></title>
    <link href="http://RobinClowers.github.com/blog/2008/09/04/making-aspnet-datagrid-usable/"/>
    <updated>2008-09-04T22:00:00-07:00</updated>
    <id>http://RobinClowers.github.com/blog/2008/09/04/making-aspnet-datagrid-usable</id>
    <content type="html"><![CDATA[<div class='post'>
<p>If you have ever used an ASP.NET DataGrid (or GridView without a DataSource control), then you know there is a lot of boiler plate code needed.&nbsp; The project I am working on right now has a bunch of grids that need to edit, add and page over a certain data type, so I we wanted to avoid duplicating all that code across every page.&nbsp; </p> <p>A little research and a prototype later, I came up with what I call the AutoGrid.&nbsp; For the most part, it just handles the editing, paging and error handling internally.&nbsp; Arguably more interesting is the fact that it is a generic control; I was under the impression that web controls could not have type parameters.&nbsp; While this is technically true, there is a cool work around, which is detailed in a <a href="http://weblogs.asp.net/leftslipper/archive/2007/12/04/how-to-allow-generic-controls-in-asp-net-pages.aspx" target="_blank">blog post</a> by Eilon Lipton.&nbsp; </p> <p>Basically, you need create a control with generic arguments, and whatever functionality you are after. Then to create another control to second control to be used in asp.net markup. It needs to inherits from the first control and have a string property for each generic argument.&nbsp; Finally you override the ControlBuilder for your first control and construct your second control by passing the type arguments to a Type&nbsp; instance of the generic control.&nbsp; The code for the non-generic markup control is below:</p><pre class="code">[<span style="color: #2b91af">ControlBuilder</span>(<span style="color: blue">typeof</span>(<span style="color: #2b91af">GenericControlBuilder</span>))]
<span style="color: blue">public class </span><span style="color: #2b91af">GenericGrid </span>: <span style="color: #2b91af">AutoGrid</span>&lt;<span style="color: #2b91af">Object</span>&gt;
{
  <span style="color: blue">private string </span>_objectType;

  <span style="color: blue">public string </span>ObjectType
  {
      <span style="color: blue">get
      </span>{
          <span style="color: blue">if </span>(_objectType == <span style="color: blue">null</span>)
          {
              <span style="color: blue">return </span><span style="color: #2b91af">String</span>.Empty;
          }
          <span style="color: blue">return </span>_objectType;
      }
      <span style="color: blue">set
      </span>{
          _objectType = <span style="color: blue">value</span>;
      }
  }
}</pre><pre class="code"></pre>
<p>As you can see, it doesn't do much by itself.&nbsp; The ControlBuilder is where the magic happens (this code is straight from Eilon's example):</p><pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">GenericControlBuilder </span>: <span style="color: #2b91af">ControlBuilder
</span>{
  <span style="color: blue">public override void </span>Init(<span style="color: #2b91af">TemplateParser </span>parser, <span style="color: #2b91af">ControlBuilder </span>parentBuilder,
      <span style="color: #2b91af">Type </span>type, <span style="color: blue">string </span>tagName, <span style="color: blue">string </span>id, <span style="color: #2b91af">IDictionary </span>attribs)
  {
<strike></strike>
      <span style="color: #2b91af">Type </span>newType = type;

      <span style="color: blue">if </span>(attribs.Contains(<span style="color: #a31515">"objecttype"</span>))
      {
          <span style="color: green">// If objecttype is specified, create a generic type that is bound
          // to that argument and then hide the objecttype attribute.
          </span><span style="color: #2b91af">Type </span>genericArg = <span style="color: #2b91af">Type</span>.GetType(
              (<span style="color: blue">string</span>)attribs[<span style="color: #a31515">"objecttype"</span>], <span style="color: blue">true</span>, <span style="color: blue">true</span>);
          <span style="color: #2b91af">Type </span>genericType = <span style="color: blue">typeof</span>(<span style="color: #2b91af">AutoGrid</span>&lt;&gt;);
          newType = genericType.MakeGenericType(genericArg);
          attribs.Remove(<span style="color: #a31515">"objecttype"</span>);
      }

      <span style="color: blue">base</span>.Init(parser, parentBuilder, newType, tagName, id, attribs);
  }
}</pre><pre class="code"></pre><pre class="code"><span style="font-family: georgia">The other thing that makes this work is an IoC container.  In this case I'm using <a href="http://structuremap.sourceforge.net/" target="_blank">Structure Map</a>, but any IoC would work.  The idea is that since the AutoGrid knows the type it is editing, it can ask for the appropriate data access class.  <a href="http://www.lostechies.com/blogs/chad_myers/" target="_blank">Chad Myers</a> helped me get the configuration right, using a custom TypeScanner:</span></pre><pre class="code"><span style="color: blue">public class </span><span style="color: #2b91af">RepositoryConventionScanner </span>: <span style="color: #2b91af">ITypeScanner
</span>{
  <span style="color: blue">public void </span>Process(<span style="color: #2b91af">Type </span>type, <span style="color: #2b91af">Registry </span>registry)
  {
      <span style="color: #2b91af">Type </span>repoForType = GetGenericParamFor(type.BaseType, <span style="color: blue">typeof</span>(<span style="color: #2b91af">Repository</span>&lt;&gt;));

      <span style="color: blue">if </span>(repoForType != <span style="color: blue">null</span>)
      {
          <span style="color: blue">var </span>genType = <span style="color: blue">typeof</span>(<span style="color: #2b91af">IRepository</span>&lt;&gt;).MakeGenericType(repoForType);
          registry
              .ForRequestedType(genType)
              .AddInstance(<span style="color: blue">new </span><span style="color: #2b91af">ConfiguredInstance</span>(type));
      }
  }

  <span style="color: blue">private static </span><span style="color: #2b91af">Type </span>GetGenericParamFor(<span style="color: #2b91af">Type </span>typeToInspect, <span style="color: #2b91af">Type </span>genericType)
  {
      <span style="color: blue">if </span>(typeToInspect != <span style="color: blue">null
          </span>&amp;&amp; typeToInspect.IsGenericType
          &amp;&amp; typeToInspect.GetGenericTypeDefinition().Equals(genericType))
      {
          <span style="color: blue">return </span>typeToInspect.GetGenericArguments()[0];
      }

      <span style="color: blue">return null</span>;
  }</pre><pre class="code"></pre><pre class="code"><span style="font-family: georgia">Then in your Application_Start event, just tell Structure Map to run this scanner on your assembly:</span></pre><pre class="code"><span style="color: #2b91af">StructureMapConfiguration
  </span>.ScanAssemblies()
  .IncludeAssemblyContainingType&lt;<span style="color: #2b91af">GenericGrid</span>&gt;()
  .With(<span style="color: blue">new </span><span style="color: #2b91af">RepositoryConventionScanner</span>());</pre><pre class="code"></pre><pre class="code"><span style="font-family: georgia">I wrote this code for a pretty specific situation, your mileage may vary.  I would love to hear thoughts about this, if you care to see the whole solution you can get it <a href="http://www.filefactory.com/file/1fb8fa/n/AutoGridSample_zip" target="_blank">here</a>. </span></pre>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linq To SQL Caching]]></title>
    <link href="http://RobinClowers.github.com/blog/2008/06/25/linq-to-sql-caching/"/>
    <updated>2008-06-25T20:55:00-07:00</updated>
    <id>http://RobinClowers.github.com/blog/2008/06/25/linq-to-sql-caching</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I ran into a weird behavior while trying out different usage patterns of Linq To SQL.  I noticed that some queries were not hitting the database!  Now I knew that Linq To SQL object tracking keeps cached copies of entities it retrieves, but my understanding was that it only used this for identity mapping and would never return stale results.  After some Googling and then looking at the internals of the System.Data.Linq.Table class with Reflector, I came to the conclusion that it was indeed returning its cached results.    This makes sense once you understand the way the data context works; I didn't realize the implications of object tracking.  Once an object has been retrieved once by a data context, its values will not be updated by the database.  This is key for the way optimistic concurrency support works in Linq to SQL, but if you are used to writing simple crud applications where you ignore concurrency it would be easy to overlook this.  </p>  <p>On thing still puzzles me though, if I change my call from</p>  <pre class="code">context.Products;</pre><p> to </p><pre class="code">context.Products.ToList();</pre><p>I would always hit the database.  It turns out that ToList calls GetEnumerator (which leads to a query being fired) whereas when I databind directly against the Table, it calls IListSource.GetList, which will return the cached table if it can.  Why wouldn't you query the database to check for new objects that might have been added to your results, and why couldn't the same query use the cache when I call ToList on it?</p></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Robin Clowers</div>
<div class='content'>
Thanks for the comment Will!  I agree that using ToList is the most intuitive way to solve this, but it definitely acheives the desired effect.  Bindable LINQ looks really interesting, I have not tried using LINQ in a connected scenario, so I was unaware of those issues.</div>
</div>
<div class='comment'>
<div class='author'>Will Hughes</div>
<div class='content'>
I've had a bunch of weirdness with LINQ caching - although most of mine have been around stored procs. <BR/><BR/>The .ToList() method, whilst crude, seems to be a good way to bypass a raft of issues. <BR/><BR/>The main drawback I found is that  unless you're using something like <A HREF="http://www.codeplex.com/bindablelinq" REL="nofollow">Bindable LINQ</A> you've just broken any eventing notifications right there should you subsequently update rows.  <BR/><BR/>Obviously it's not that important for ASP.NET and other backend services, but is more important for WinForms/Silverlight/WPF.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET 2.0 Databinding, Part III]]></title>
    <link href="http://RobinClowers.github.com/blog/2008/05/15/aspnet-20-databinding-part-iii/"/>
    <updated>2008-05-15T20:05:00-07:00</updated>
    <id>http://RobinClowers.github.com/blog/2008/05/15/aspnet-20-databinding-part-iii</id>
    <content type="html"><![CDATA[<div class='post'>
<p>In <a href="http://robinclowers.blogspot.com/2008/05/aspnet-20-databinding-part-i.html" target="_blank">part I</a>, I covered datasource controls and two way databinding.&#160; In <a href="http://robinclowers.blogspot.com/2008/05/aspnet-20-databinding-part-ii.html" target="_blank">part II</a>, I went into how to use table adapters for handling CRUD operations with two way binding.&#160; Today I want to explain when it makes sense to use these features.</p>  <p>It is important to keep in mind that any technology, feature or pattern will only be useful in a certain context.&#160; Two way databinding is a good fit for single table editing scenarios in applications that will not get heavy user loads.&#160; For more complex joined data you have to write code and it forces you into a very data centric and hard to test design.&#160; For applications that have complex editing scenarios you are often better off handling the GridView events directly.&#160; If you are designing a system with lots of business rules, you should probably using a rich domain model.&#160; I intend to write a post about using domain driven design patterns soon.&#160; </p>  <p>By the same token, there are other options for handling data presentation.&#160; Depending on you needs, you might want to consider using a commercial grid control like Telerik, Infragistics or Ext js.&#160; Many of these controls will handle updating your datasource object for you, which gives you more freedom in the design of your data access strategy.</p>  <p>If you found this series useful, saw a mistake or have any questions please let me know.&#160; I am always interested in feedback, so feel free to leave me a comment.</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET 2.0 Databinding, Part II]]></title>
    <link href="http://RobinClowers.github.com/blog/2008/05/05/aspnet-20-databinding-part-ii/"/>
    <updated>2008-05-05T23:32:00-07:00</updated>
    <id>http://RobinClowers.github.com/blog/2008/05/05/aspnet-20-databinding-part-ii</id>
    <content type="html"><![CDATA[<div class='post'>
<p>In <a href="http://robinclowers.blogspot.com/2008/05/aspnet-20-databinding-part-i.html" target="_blank">part I</a>, I talked about DataSource controls and how they enable two way databinding.  <a href="http://msdn.microsoft.com/en-us/library/bz9tthwx.aspx" target="_blank">Table adapters</a> are another new feature of ASP.NET 2.0 that was designed to work with the ObjectDataSource to allow declarative databinding.  </p>  <p>What do I mean by declarative?  At a high level, declarative simply means you state what you want, not how you want it done (as opposed to imperative, where you say how something should be accomplished).  When these terms are applied to ASP.NET, it usually means aspx markup (declarative) or C# code in your code-behind classes (imperative).</p>  <p>Table adapters generate ADO.NET code, specifically SqlDataAdapters and handles all the database connections for you.  Using the designer in Visual Studio we can drag and drop tables, specify stored procedures or ad-hoc SQL and VS will generate a strongly typed DataSet based on the shape of the query, and a SqlDataAdapter for each query you add.  </p>  <p>The code that is generated by the designers are partial classes, so you can add methods and properties or handle events on the table adapters or the DataSets they return.  The usual example is adding validation logic, which is a nice idea, but implementing the validation with the ASP.NET validation controls generally provides a better user experience.  </p>  <p>The table adapter classes and the query methods they expose are decorated with attributes that tell the databinding designers they support certain operations.  You could implement your own objects that can work with two way binding that persist to a completely different database, or call a set of web services.</p>  <p>The first query you add to a table adapter defines the shape of the DataTable that is generated for you.  If this query is a single table select statements, the designer can generate the insert, update and delete methods for you, otherwise you must manually write the SQL.</p>  <p>In part III, I will put the pieces together and look at where two way databinding and table adapters are a good fit.</p></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Amanda</div>
<div class='content'>
Hi Robin, Steve told me about your blog so I thought I would subscribe. I noticed you found several blogs to read already and I am still getting the hang of mine - how did you find others to connect with and where did you go to do so? I know you can browse their featured blogs, but do you know how to browse by category? The site seems a little difficult for me to navigate. -Amanda</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET 2.0 Databinding, Part I]]></title>
    <link href="http://RobinClowers.github.com/blog/2008/05/05/aspnet-20-databinding-part-i/"/>
    <updated>2008-05-05T23:04:00-07:00</updated>
    <id>http://RobinClowers.github.com/blog/2008/05/05/aspnet-20-databinding-part-i</id>
    <content type="html"><![CDATA[<div class='post'>
<p>This is the first of a series of posts about databinding in ASP.NET 2.0.  These posts are mostly for my understanding and writing practice, but hopefully someone gets value out of them as well.  To whoever does read this, I would love to hear some feedback.</p>  <p>The features I will be talking about are covered in a <a href="http://www.asp.net/learn/data-access/" target="_blank">set of tutorials</a> by <a href="http://scottonwriting.net/" target="_blank">Scott Mitchell</a> that are much deeper and more detailed than these posts.  </p>  <p>In ASP.NET 1.1, databinding was a manual, one way operation. You set the DataSource of a UI control to a collection and call DataBind. This is great, but what about getting the data back from the UI control? You have to manually access the values from the control and write code to map the values back to some kind of object.</p>  <p>In ASP.NET 2.0, there is support for two way databinding. What do I mean by two way? When a command is issued to a bound control, it will check if the DataSource object it is bound to supports the given command. If it does, the data will be passed back to the datasource control which will handle the operation (update, insert, delete). </p>  <p>This implementation has several parts. First, all data-bound controls now have a DataSourceID property. This property should correspond the ID property of a <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.datasourcecontrol.aspx" target="_blank">DataSourceControl</a> object. These controls handle calling DataBind on the control and can be configured to handle most of the command events for a bound control (Edit, Update, Cancel, Delete, and Insert). Keep in mind that although DataSourceControl objects are part of the System.Web.UI namespace, they do not render anything themselves.</p>  <p>For the datasource to work, you must at least configure it to handle fetching data. For an <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.objectdatasource.aspx" target="_blank">ObjectDataSource</a>, this means pointing it to an instance method that it should call to fetch the data. For a <a href="http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.sqldatasource.aspx" target="_blank">SqlDataSource</a>, you have to give it a connection string and a select statement.</p>  <p>In part II, I will show how to use an ObjectDataSource in conjunction with TableAdapters (another ASP.NET 2.0 feature), to allow CRUD operations against a SQL Server database without writing a single line of C# code.</p></div>

]]></content>
  </entry>
  
</feed>
